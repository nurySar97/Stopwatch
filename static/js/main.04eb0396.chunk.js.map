{"version":3,"sources":["services.js","components/stop-watch.js","index.js"],"names":["toStopWatch","time","timerCell","_time","map","measure","Math","floor","toString","length","join","Default","useState","seconds","setSeconds","isStarted","setIsStarted","intervalRef","useRef","waitButtonRef","subscribeToInterval","initSeconds","current","interval","pipe","scan","subscribe","unSubscribeToInterval","unsubscribe","useEffect","$waitBtn","fromEvent","$buffer","debounceTime","$subscribeWaitdBtn","buffer","list","filter","x","className","onClick","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAAaA,EAAc,WAAe,IAAdC,EAAa,uDAAN,EAC7BC,EAAY,EACdC,EAAQF,EACV,MAAO,CAAC,KAAM,GAAI,GACfG,KAAI,SAACC,GAGJ,OAFAH,EAAYI,KAAKC,MAAMJ,EAAQE,GAASG,WACxCL,GAAgBE,EACTH,EAAUO,OAAS,EAAI,IAAMP,EAAYA,KAEjDQ,KAAK,M,OC4GKC,EAzGC,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACbC,EADa,KACJC,EADI,OAEcF,oBAAS,GAFvB,mBAEbG,EAFa,KAEFC,EAFE,KAGdC,EAAcC,iBAAO,MACrBC,EAAgBD,iBAAO,MAGvBE,EAAsB,WAAsB,IAArBC,EAAoB,uDAAN,EACrCJ,EAAYK,UAEhBL,EAAYK,QAAUC,YAAS,KAC5BC,KAAKC,aAAK,SAACxB,GAAD,OAAUA,EAAO,IAAGoB,IAC9BK,UAAUZ,KAITa,EAAwB,WACvBV,EAAYK,UAEjBL,EAAYK,QAAQM,cACpBX,EAAYK,QAAU,OA2CxB,OAlBAO,qBAAU,WACR,IAAMC,EAAWC,YAAUZ,EAAcG,QAAS,SAC5CU,EAAUF,EAASN,KAAKS,YAAa,MAErCC,EAAqBJ,EACxBN,KACCW,YAAOH,GACP5B,aAAI,SAACgC,GAAD,OAAUA,EAAK3B,UACnB4B,aAAO,SAACC,GAAD,OAAa,IAANA,MAEfZ,WAAU,WACJT,EAAYK,UACjBN,GAAa,GACbW,QAEJ,OAAO,kBAAMO,EAAmBN,iBAC/B,IAGD,sBAAMW,UAAU,aAAhB,SACE,sBAAKA,UAAU,gBAAf,UACE,2CACA,uBACA,qBAAKA,UAAU,6BAAf,SACE,sBAAKA,UAAU,2EAAf,UACE,qBACEA,UAAS,mBAAcxB,EAAY,mBAAqB,MAE1D,8BAAMf,EAAYa,UAItB,sBAAK0B,UAAU,mBAAf,UACGxB,EACC,wBACEwB,UAAU,4BACVC,QAlDS,WACnB1B,EAAW,GACXE,GAAa,GACbW,KA6CQ,kBAOA,wBACEY,UAAU,6BACVC,QAhEU,WACpB1B,EAAW,GACXE,GAAa,GACbI,KA2DQ,mBAOF,wBAAQmB,UAAU,6BAA6BE,IAAKtB,EAApD,kBAGA,wBAAQoB,UAAU,0BAA0BC,QA1D9B,WACpB1B,EAAW,GACXE,GAAa,GACbW,IACAP,KAsDM,4BCvGVsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.04eb0396.chunk.js","sourcesContent":["export const toStopWatch = (time = 1) => {\r\n  let timerCell = 0,\r\n    _time = time;\r\n  return [3600, 60, 1]\r\n    .map((measure) => {\r\n      timerCell = Math.floor(_time / measure).toString();\r\n      _time = _time % measure;\r\n      return timerCell.length < 2 ? \"0\" + timerCell : timerCell;\r\n    })\r\n    .join(\":\");\r\n};\r\n","import {\n  buffer,\n  debounceTime,\n  filter,\n  fromEvent,\n  interval,\n  map,\n  scan,\n} from \"rxjs\";\nimport { useRef, useState, useEffect } from \"react\";\nimport { toStopWatch } from \"../services\";\n\nconst Default = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [isStarted, setIsStarted] = useState(false);\n  const intervalRef = useRef(null);\n  const waitButtonRef = useRef(null);\n\n  // subscribe to rxjs interval\n  const subscribeToInterval = (initSeconds = 0) => {\n    if (intervalRef.current) return;\n\n    intervalRef.current = interval(1000)\n      .pipe(scan((time) => time + 1, initSeconds))\n      .subscribe(setSeconds);\n  };\n\n  // un subscribe to rxjs interval\n  const unSubscribeToInterval = () => {\n    if (!intervalRef.current) return;\n\n    intervalRef.current.unsubscribe();\n    intervalRef.current = null;\n  };\n\n  // start button event handler\n  const onHandleStart = () => {\n    setSeconds(0);\n    setIsStarted(true);\n    subscribeToInterval();\n  };\n\n  // stop button event handler\n  const onHandleStop = () => {\n    setSeconds(0);\n    setIsStarted(false);\n    unSubscribeToInterval();\n  };\n\n  // restart button event handler\n  const onHandleReset = () => {\n    setSeconds(0);\n    setIsStarted(true);\n    unSubscribeToInterval();\n    subscribeToInterval();\n  };\n\n  useEffect(() => {\n    const $waitBtn = fromEvent(waitButtonRef.current, \"click\");\n    const $buffer = $waitBtn.pipe(debounceTime(300));\n\n    const $subscribeWaitdBtn = $waitBtn\n      .pipe(\n        buffer($buffer),\n        map((list) => list.length),\n        filter((x) => x === 2)\n      )\n      .subscribe(() => {\n        if (!intervalRef.current) return;\n        setIsStarted(false);\n        unSubscribeToInterval();\n      });\n    return () => $subscribeWaitdBtn.unsubscribe();\n  }, []);\n\n  return (\n    <main className=\"stop-watch\">\n      <div className=\"container p-3\">\n        <h1>Stopwatch</h1>\n        <hr />\n        <div className=\"row justify-content-center\">\n          <div className=\"col-10 col-sm-8 col-md-4 col-lg-4 col-xl-3 text-center position-relative\">\n            <div\n              className={`sceleton ${isStarted ? \"sceleton-animate\" : \"\"}`}\n            />\n            <div>{toStopWatch(seconds)}</div>\n          </div>\n        </div>\n\n        <div className=\"text-center mt-5\">\n          {isStarted ? (\n            <button\n              className=\"btn btn-danger btn-lg m-3\"\n              onClick={onHandleStop}\n            >\n              Stop\n            </button>\n          ) : (\n            <button\n              className=\"btn btn-success btn-lg m-3\"\n              onClick={onHandleStart}\n            >\n              Start\n            </button>\n          )}\n          <button className=\"btn btn-warning btn-lg m-3\" ref={waitButtonRef}>\n            Wait\n          </button>\n          <button className=\"btn btn-info btn-lg m-3\" onClick={onHandleReset}>\n            Reset\n          </button>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Default;\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport StopWatch from \"./components/stop-watch\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StopWatch />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}